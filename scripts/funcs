#!/bin/bash

# Enable debug mode if DEBUG is set
[[ "${DEBUG}" == "true" ]] && set -x

# Helper function to check if infracost is available and enabled
check_infracost() {
    if [[ "${INFRACOST_EVAL}" == "true" ]] && command -v infracost >/dev/null 2>&1; then
        return 0
    fi
    return 1
}

# Helper function to run infracost breakdown with terraform vars
run_infracost() {
    local tf_vars=("$@")  # Accept array of vars
    if check_infracost; then
        echo "Running Infracost breakdown before applying changes..."
        [[ "${DEBUG}" == "true" ]] && echo "Debug: Original terraform vars: ${tf_vars[*]}"
        
        # Convert terraform vars to infracost format
        local infracost_vars=()
        for var in "${tf_vars[@]}"; do
            if [[ $var =~ -var=([^=]+)=(.*) ]]; then
                key="${BASH_REMATCH[1]}"
                value="${BASH_REMATCH[2]}"
                infracost_vars+=("--terraform-var" "${key}=${value}")
            fi
        done
        
        [[ "${DEBUG}" == "true" ]] && echo "Debug: Running infracost with converted vars: ${infracost_vars[*]}"
        if [[ "${DEBUG}" == "true" ]]; then
            INFRACOST_LOG_LEVEL=debug infracost breakdown --path . "${infracost_vars[@]}"
        else
            infracost breakdown --path . "${infracost_vars[@]}"
        fi
    fi
}

# Function to display usage instructions
usage() {
    echo "Usage: Source this script and run any of the following commands:"
    echo ""
    echo "  delete_all [aa]                 - Delete all Terraform-managed resources"
    echo "  delete_salt_master [aa]         - Delete the salt master instance"
    echo ""
    echo "  create_gcp_validator [aa]       - Create only GCP validators"
    echo "  create_gcp_aws_validators [aa]  - Create both GCP and AWS validators"
    echo "  create_all [aa]                 - Create all instances (validators enabled, minions disabled)"
    echo ""
    echo "  create_gcp_minions [aa]         - Create only GCP test minions"
    echo "  create_aws_minions [aa]         - Create only AWS test minions"
    echo "  create_gcp_aws_minions [aa]     - Create both GCP and AWS test minions"
    echo ""
    echo "  recreate_gcp_minions [aa]       - Recreate GCP test minions (delete and recreate)"
    echo "  recreate_aws_minions [aa]       - Recreate AWS test minions (delete and recreate)"
    echo "  recreate_gcp_aws_minions [aa]   - Recreate both GCP and AWS test minions"
    echo ""
    echo "Options:"
    echo "  [aa] (optional)                 - Pass 'aa' to enable auto-approve"
    echo ""
    echo "Environment Variables:"
    echo "  INFRACOST_EVAL                  - Set to 'true' to enable cost estimation before apply"
    echo "  DEBUG                           - Set to 'true' to enable debug output"
    echo ""
    echo "Example usage after sourcing the script:"
    echo "  create_gcp_validator"
    echo "  delete_all aa"
    echo "  DEBUG=true INFRACOST_EVAL=true create_gcp_aws_validators"
}

# Function to delete all instances
delete_all() {
    local auto_approve=""
    if [[ "$1" == "aa" ]]; then
        auto_approve="-auto-approve"
    fi
    echo "Deleting all Terraform-managed resources... (auto-approve: $auto_approve)"

    run_infracost "${tf_vars[@]}"
    echo "terraform apply ${tf_vars[*]} $auto_approve"
    time terraform apply ${tf_vars[*]} $auto_approve
}

# Function to delete the salt master
delete_salt_master() {
    local auto_approve=""
    if [[ "$1" == "aa" ]]; then
        auto_approve="-auto-approve"
    fi
    echo "Deleting salt master... (auto-approve: $auto_approve)"
    echo "terraform destroy -target=module.instances.aws_instance.salt_master $auto_approve"
    time terraform destroy -target=module.instances.aws_instance.salt_master $auto_approve
}

# Function to create GCP validators only
create_gcp_validator() {
    local auto_approve=""
    if [[ "$1" == "aa" ]]; then
        auto_approve="-auto-approve"
    fi
    echo "Creating only GCP validators... (auto-approve: $auto_approve)"
    local tf_vars=(
        "-var=create_validators=true"
        "-var=create_test_minions=false"
        "-var=create_gcp_instances=true"
    )
    run_infracost "${tf_vars[@]}"
    echo "terraform apply ${tf_vars[*]} $auto_approve"
    time terraform apply ${tf_vars[*]} $auto_approve
}

# Function to create both GCP and AWS validators
create_gcp_aws_validators() {
    local auto_approve=""
    if [[ "$1" == "aa" ]]; then
        auto_approve="-auto-approve"
    fi
    echo "Creating both GCP and AWS validators... (auto-approve: $auto_approve)"
    local tf_vars=(
        "-var=create_validators=true"
        "-var=create_test_minions=false"
        "-var=create_gcp_instances=true"
        "-var=create_aws_instances=true"
    )
    run_infracost "${tf_vars[@]}"
    echo "terraform apply ${tf_vars[*]} $auto_approve"
    time terraform apply ${tf_vars[*]} $auto_approve
}

# Function to create all instances
create_all() {
    local auto_approve=""
    if [[ "$1" == "aa" ]]; then
        auto_approve="-auto-approve"
    fi
    echo "Creating all instances... (auto-approve: $auto_approve)"
    local tf_vars=(
        "-var=create_validators=true"
        "-var=create_test_minions=false"
        "-var=create_gcp_instances=true"
        "-var=create_aws_instances=true"
    )
    run_infracost "${tf_vars[@]}"
    echo "terraform apply ${tf_vars[*]} $auto_approve"
    time terraform apply ${tf_vars[*]} $auto_approve
}

# Function to create GCP test minions only
create_gcp_minions() {
    local auto_approve=""
    if [[ "$1" == "aa" ]]; then
        auto_approve="-auto-approve"
    fi
    echo "Creating only GCP test minions... (auto-approve: $auto_approve)"
    local tf_vars=(
        "-var=create_validators=false"
        "-var=create_test_minions=true"
        "-var=create_gcp_instances=true"
    )
    run_infracost "${tf_vars[@]}"
    echo "terraform apply ${tf_vars[*]} $auto_approve"
    time terraform apply ${tf_vars[*]} $auto_approve
}

# Function to create AWS test minions only
create_aws_minions() {
    local auto_approve=""
    if [[ "$1" == "aa" ]]; then
        auto_approve="-auto-approve"
    fi
    echo "Creating only AWS test minions... (auto-approve: $auto_approve)"
    local tf_vars=(
        "-var=create_validators=false"
        "-var=create_test_minions=true"
        "-var=create_aws_instances=true"
    )
    run_infracost "${tf_vars[@]}"
    echo "terraform apply ${tf_vars[*]} $auto_approve"
    time terraform apply ${tf_vars[*]} $auto_approve
}

# Function to create both GCP and AWS test minions
create_gcp_aws_minions() {
    local auto_approve=""
    if [[ "$1" == "aa" ]]; then
        auto_approve="-auto-approve"
    fi
    echo "Creating both GCP and AWS test minions... (auto-approve: $auto_approve)"
    local tf_vars=(
        "-var=create_validators=false"
        "-var=create_test_minions=true"
        "-var=create_gcp_instances=true"
        "-var=create_aws_instances=true"
    )
    run_infracost "${tf_vars[@]}"
    echo "terraform apply ${tf_vars[*]} $auto_approve"
    time terraform apply ${tf_vars[*]} $auto_approve
}

# Function to recreate GCP test minions
recreate_gcp_minions() {
    echo "Recreating GCP test minions..."
    delete_all
    create_gcp_minions "$1"
}

# Function to recreate AWS test minions
recreate_aws_minions() {
    echo "Recreating AWS test minions..."
    delete_all
    create_aws_minions "$1"
}

# Function to recreate both GCP and AWS test minions
recreate_gcp_aws_minions() {
    echo "Recreating both GCP and AWS test minions..."
    delete_all
    create_gcp_aws_minions "$1"
}


usage
